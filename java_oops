# Java OOP Concepts ‚Äî Intermediate Level

---

## üåü Summary / Overview

Java's Object-Oriented Programming (OOP) principles form the backbone of its design, enabling modular, reusable, and maintainable code. The four key pillars of OOP in Java are:

* **Encapsulation**: Hiding internal state and requiring all interaction to be performed through an object's methods. This protects the integrity of the object's data.
* **Inheritance**: A mechanism where a new class derives properties and behavior from an existing class, supporting code reuse and hierarchical classification.
* **Polymorphism**: The ability of one interface to be used for a general class of actions. The specific action is determined by the exact nature of the situation.
* **Abstraction**: Focusing on essential qualities rather than specific characteristics. Abstraction hides complexity by exposing only relevant features through abstract classes and interfaces.

Other important related concepts include:

* **Composition**: Building classes using references to other objects (has-a relationships), often preferred over inheritance to promote flexibility.
* **Inner Classes**: Classes defined within another class, used for logically grouping classes or accessing enclosing class members.
* **Sealed Classes (Java 17)**: Classes that restrict which other classes can extend them, enhancing control over type hierarchies.
* **Covariant Return Types**: Allowing an overriding method to return a subtype of the original return type.
* **Dynamic Method Dispatch**: The process by which a call to an overridden method is resolved at runtime rather than compile time.

---

## üåü Quiz Mode ‚Äî Questions

1Ô∏è‚É£ What is encapsulation in Java? Why is it important?

2Ô∏è‚É£ What is inheritance in Java? How is it implemented?

3Ô∏è‚É£ What is polymorphism? What are its types in Java?

4Ô∏è‚É£ What is abstraction? How is it achieved in Java?

5Ô∏è‚É£ What is the difference between an abstract class and an interface (Java 8+)?

6Ô∏è‚É£ What is method overloading vs method overriding?

7Ô∏è‚É£ What are the rules for method overriding in Java?

8Ô∏è‚É£ What is a covariant return type?

9Ô∏è‚É£ What is the Diamond Problem? How does Java handle it?

üîü How does Java handle multiple inheritance with interfaces that have the same default method?

1Ô∏è‚É£1Ô∏è‚É£ What is composition? How does it compare to inheritance?

1Ô∏è‚É£2Ô∏è‚É£ What are sealed classes (Java 17)? What problem do they solve?

1Ô∏è‚É£3Ô∏è‚É£ What is an inner class? What types of inner classes exist in Java?

1Ô∏è‚É£4Ô∏è‚É£ Can constructors be inherited in Java?

1Ô∏è‚É£5Ô∏è‚É£ What is the difference between `this` and `super` in Java?

1Ô∏è‚É£6Ô∏è‚É£ How does Java achieve runtime polymorphism internally?

1Ô∏è‚É£7Ô∏è‚É£ Can a class be both abstract and final? Why or why not?

1Ô∏è‚É£8Ô∏è‚É£ What is the difference between interface default methods and abstract class methods?

---

## üåü Answers

1Ô∏è‚É£ Encapsulation is the practice of hiding an object's internal state and requiring all interaction through public methods. It ensures data integrity and provides controlled access.

2Ô∏è‚É£ Inheritance allows a class (subclass) to derive properties and behaviors from another class (superclass), implemented using the `extends` keyword.

3Ô∏è‚É£ Polymorphism means many forms. Types: compile-time (method overloading) and runtime (method overriding).

4Ô∏è‚É£ Abstraction hides internal implementation details and shows only relevant features. Achieved through abstract classes and interfaces.

5Ô∏è‚É£ Abstract classes can have constructors, state, abstract and concrete methods. Interfaces (Java 8+) can have abstract, default, and static methods, but no constructors or instance state.

6Ô∏è‚É£ Overloading: same method name, different parameter lists (compile-time). Overriding: subclass provides specific implementation for a superclass method (runtime).

7Ô∏è‚É£ Same signature, can‚Äôt reduce visibility, can return covariant types, can‚Äôt throw broader checked exceptions, can‚Äôt override final/static methods.

8Ô∏è‚É£ Covariant return type allows an overriding method to return a subtype of the original return type.

9Ô∏è‚É£ The Diamond Problem is ambiguity from multiple inheritance of classes; Java avoids this by supporting single class inheritance.

üîü Java forces the implementing class to resolve conflicts explicitly if two interfaces provide the same default method.

1Ô∏è‚É£1Ô∏è‚É£ Composition means building classes using other objects. It‚Äôs preferred over inheritance for flexibility and looser coupling.

1Ô∏è‚É£2Ô∏è‚É£ Sealed classes restrict which classes can extend them, providing more control over inheritance hierarchies.

1Ô∏è‚É£3Ô∏è‚É£ Inner classes are classes defined inside another class. Types: static nested class, non-static inner class, local class, anonymous class.

1Ô∏è‚É£4Ô∏è‚É£ Constructors are not inherited, but a subclass can invoke a superclass constructor using `super()`.

1Ô∏è‚É£5Ô∏è‚É£ `this` refers to the current instance. `super` refers to the parent class instance.

1Ô∏è‚É£6Ô∏è‚É£ Java uses dynamic method dispatch (virtual method table) to resolve overridden methods at runtime.

1Ô∏è‚É£7Ô∏è‚É£ No. Abstract means meant to be subclassed. Final means cannot be subclassed. They are contradictory.

1Ô∏è‚É£8Ô∏è‚É£ Interface default methods provide implementation without state. Abstract class methods can use instance state and constructors.
